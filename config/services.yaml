# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html

imports:
    - { resource: rfx_analysis.yaml, ignore_errors: true }
    - { resource: security.yaml }
    - { resource: tools.yaml }
    - { resource: version.yaml }
    - { resource: table_map.yaml, ignore_errors: true }
    - { resource: project_map.yaml, ignore_errors: true }
    - { resource: assessments.yaml }
    - { resource: quote.yaml }
    - { resource: request_blacklist.yaml, ignore_errors: true }
    - { resource: admin_stats.yaml }
    - { resource: user_group_icons.yaml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app.single_wiki: '%env(bool:APP_SINGLE_WIKI)%'
    app.query_timeout: '%env(int:APP_QUERY_TIMEOUT)%'
    app.rate_limit_count: '%env(int:APP_RATE_LIMIT_COUNT)%'
    app.rate_limit_time: '%env(int:APP_RATE_LIMIT_TIME)%'
    app.is_labs: '%env(bool:APP_IS_WMF)%'

services:
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # Makes classes in src/App available to be used as services.
    # This creates a service per class whose id is the fully-qualified class name.
    App\:
         resource: '../src/*'
         # you can exclude directories or files
         # but if a service is unused, it's removed anyway
         exclude:
            - '../src/{Model}'
            - '../src/Kernel.php'
            - '../src/DoctrineMigrations/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
#        public: true
        tags: ['controller.service_arguments']

    App\Repository\:
        resource: '../src/Repository'
        calls:
        - [setContainer, ["@service_container"]]

    app.monolog.processor.web:
        class: App\Monolog\WebProcessorMonolog
        arguments: ['@request_stack']
        tags:
            - { name: monolog.processor, method: processRecord }

    # These need to not be public, but they are, for now...
    app.automated_edits_helper:
        class: App\Helper\AutomatedEditsHelper
        arguments: ['@service_container']
        public: true
    app.i18n_helper:
        class: App\Helper\I18nHelper
        arguments: ['@service_container']
        public: true
    logger:
        alias: 'monolog.logger'
        public: true

    app.exception_listener:
        class: App\EventSubscriber\ExceptionListener
        arguments: ['@twig', '@logger', '%kernel.environment%']
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    # add more services, or override services that need manual wiring
    # App\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
