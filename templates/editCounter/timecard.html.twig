{% extends is_sub_request ? 'subrequest.html.twig' : 'editCounter/subtool.html.twig' %}
{% import 'macros/wiki.html.twig' as wiki %}
{% import 'macros/layout.html.twig' as layout %}

{% block downloadLink %}
    {{ layout.downloadLink('EditCounterTimecard', {project:project.domain, username:user.usernameIdent}, ['wikitext'], 'UserApiTimeCard') }}
{% endblock %}

{% block ecBody %}

{% if not project.userHasOptedIn(user) %}
    {{ wiki.userOptedOut(project, user) }}
{% else %}

<div class="sr-only">
    {% set days = {
        1: msg('sunday'),
        2: msg('monday'),
        3: msg('tuesday'),
        4: msg('wednesday'),
        5: msg('thursday'),
        6: msg('friday'),
        7: msg('saturday')
    }%}

    <table>
        <thead>
            <th></th>
            {% for period in 0..11 %}
                <th>
                    <time>{{ (period * 2 ~ ':' ~ 00)|date_format('HH:mm') }}</time>
                </th>
            {% endfor %}
        </thead>
        <tbody>
            {% for day in 1..7 %}
                <tr>
                    <th>{{ days[day] }}</th>
                    {% for item in ec.timeCard|filter(item => item.day_of_week == day and item.hour != 24) %}
                        <td>{{ item.value }}</td>
                    {% endfor %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<canvas id="timecard-bubble-chart" height="100"></canvas>

<script type="text/javascript">
    // MySQL uses ODBC standard, treating the first day (1) as Sunday
    var days = {
        1: "{{ msg('sunday') }}",
        2: "{{ msg('monday') }}",
        3: "{{ msg('tuesday') }}",
        4: "{{ msg('wednesday') }}",
        5: "{{ msg('thursday') }}",
        6: "{{ msg('friday') }}",
        7: "{{ msg('saturday') }}"
    };
    var timeCardDatasets = [];
    {% for i in 0..7 %}
        timeCardDatasets.push({
            label: "{{ msg('total') }}",
            backgroundColor: "{{ chartColor(i) }}",
            data: []
        });
    {% endfor %}

    {##
     # Here we find the max value for midnight (leftmost column),
     # which we can then use to fine-tune the offset of the bubbles
     # to ensure they don't overlap the labels. This isn't 100%
     # fool-proof but it does help.
     #}
    {% set maxMidnight = 0 %}
    {% for data in ec.timeCard|filter(data => data.hour != 24) %}
        {% if data.hour == 0 and data.value > maxMidnight %}
            {% set maxMidnight = maxMidnight + data.value %}
        {% endif %}
        {% set datasetIndex = data.day_of_week - 1 %}
        var entry = {{ data|json_encode|raw }};
        entry.x = entry.hour;
        entry.y = Math.abs(8 - entry.day_of_week);
        timeCardDatasets[{{ datasetIndex }}].data.push(entry);
    {% endfor %}

    var chart = new Chart($("#timecard-bubble-chart"), {
        type: 'bubble',
        data: {
            datasets: timeCardDatasets
        },
        options: {
            responsive: true,
            // maintainAspectRatio: false,
            legend: {
                display: false
            },
            layout: {
                padding: {
                    right: 20
                }
            },
            elements: {
                point: {
                    radius: function(context) {
                        var index = context.dataIndex;
                        var data = context.dataset.data[index];
                        // var size = context.chart.width;
                        // var base = data.value / 100;
                        // return (size / 50) * base;
                        return data.scale;
                    },
                    hitRadius: 8
                }
            },
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: 8,
                        stepSize: 1,
                        padding: 25,
                        callback: function(value, index, values) {
                            return days[index];
                        }
                    },
                    position: i18nRTL ? 'right' : 'left',
                    gridLines: {
                        color: xtools.application.chartGridColor
                    }
                }],
                xAxes: [{
                    ticks: {
                        beginAtZero: true,
                        min: 0,
                        max: 23,
                        stepSize: 1,
                        reverse: i18nRTL,
                        padding: 0,
                        callback: function(value) {
                            if (value % 2 === 0) {
                                return value + ":00";
                            } else {
                                return '';
                            }
                        }
                    },
                    gridLines: {
                        color: xtools.application.chartGridColor
                    }
                }]
            },
            tooltips: {
                displayColors: false,
                callbacks: {
                    title: function(items, data) {
                        return days[7 - items[0].yLabel + 1] + ' ' + items[0].xLabel + ':00';
                    },
                    label: function(item) {
                        var numEdits = [timeCardDatasets[item.datasetIndex].data[item.index].value];
                        return`${numEdits} ${$.i18n('num-edits', [numEdits])}`;
                    }
                }
            }
        }
    });
</script>

<div class="text-muted times-in-utc" style="clear:both">
    {{ msg('times-in-utc') }}
</div>

{% endif %}

{% endblock %}
